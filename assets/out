#!/bin/bash

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

export root=`dirname $0 | while read a; do cd $a && pwd && break; done`

source "${root}/common.sh"

source=$1

if [ -z "${source}" ]; then
  echo "usage: $0 <path/to/source>"
  exit 1
fi

payload=$(mktemp ${TMPDIR:-/tmp}/sonarqube-resource-out.XXXXXX)
cat > $payload <&0

scanner_opts=""

project_path=$(jq -r '.params.project_path // ""' < $payload)
if [ ! -d "${source}/${project_path}" ]; then
  echo "Project path (${project_path}) not found or not a directory."
  exit 1
fi

sonar_host_url=$(jq -r '.source.host_url // ""' < $payload)
if [ -z "${sonar_host_url}" ]; then
  echo "host_url param has not been specified."
  exit 1
else
  scanner_opts+="-Dsonar.host.url=${sonar_host_url}"
fi

sonar_login=$(jq -r '.source.login // ""' < $payload)
if [ -z "${sonar_login}" ]; then
  echo "login param has not been specified."
  exit 1
else
  scanner_opts+=" -Dsonar.login=${sonar_login}"
fi

sonar_password=$(jq -r '.source.password // ""' < $payload)
if [ ! -z "${sonar_password}" ]; then
  scanner_opts+=" -Dsonar.password=${sonar_password}"
fi

sonar_project_key=$(jq -r '.params.project_key // ""' < $payload)
if [ ! -z "${sonar_project_key}" ]; then
  scanner_opts+=" -Dsonar.projectKey=${sonar_project_key}"
fi

sonar_sources=$(jq -r '.params.sources // ""' < $payload)
if [ ! -z "${sonar_sources}" ]; then
  scanner_opts+=" -Dsonar.sources=${sonar_sources}"
fi

scanner_type=$(jq -r '.params.scanner_type // ""' < $payload)
scanner_bin="sonar-scanner"
if [ -z "${scanner_type}" ] || [ "${scanner_type}" == "auto" ]; then
  if [ -f "${source}/${project_path}/pom.xml" ]; then
    scanner_type="maven"
    scanner_bin="mvn -q org.sonarsource.scanner.maven:sonar-maven-plugin:3.3.0.603:sonar"
  else
    scanner_type="cli"
  fi
fi

cd "${source}/${project_path}"
${scanner_bin} ${scanner_opts}


if [ -f "./.scannerwork/report-task.txt" ]; then
  eval $(read_properties "./.scannerwork/report-task.txt")
else
  echo "SonarQube report could not be located."
  exit 1
fi

jq -n "{
  version: {ceTaskId: \"${ceTaskId}\"},
  metadata: {
    project_key: \"${projectKey}\",
    server_url: \"${serverUrl}\",
    server_version: \"${serverVersion}\",
    dashboard_url: \"${dashboardUrl}\",
    ce_task_url: \"${ceTaskUrl}\",
    scanner_type: \"${scanner_type}\"
  }
}" >&3
